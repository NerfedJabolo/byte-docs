const snippets={"tree/basic-node":"<code class='hljs'><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-comment\">// Common prefix</span>\n    prefix;\n\n    <span class=\"hljs-comment\">// The value to return in case of exact match</span>\n    store;\n\n    <span class=\"hljs-comment\">// Store all children node</span>\n    children;\n}\n</code>","tree/route-nodes":"<code class='hljs'><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-comment\">// Common prefix</span>\n    prefix;\n\n    <span class=\"hljs-comment\">// The value to return in case of exact match</span>\n    store;\n\n    <span class=\"hljs-comment\">// The value to return in case of wildcard match</span>\n    wildcardStore;\n\n    <span class=\"hljs-comment\">// Store all children node</span>\n    children;\n\n    <span class=\"hljs-comment\">// Store an URL parameter that goes after the node, eg. /path/:id</span>\n    paramNode;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ParametricNode</span> {\n    <span class=\"hljs-comment\">// A nornal node that represents the next part after the parameter, eg. /:id/path</span>\n    child;\n\n    <span class=\"hljs-comment\">// The value to return if the path matches the pattern</span>\n    store;\n\n    <span class=\"hljs-comment\">// The parameter name</span>\n    name;\n}\n</code>","algorithm/third":"<code class='hljs'><span class=\"hljs-keyword\">const</span> route = routesMap[path];\n<span class=\"hljs-keyword\">if</span> (route) {\n    <span class=\"hljs-comment\">// Run some stuff with route</span>\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> route <span class=\"hljs-keyword\">of</span> dynamicRoutes) {\n    <span class=\"hljs-keyword\">const</span> matchArr = path.<span class=\"hljs-title function_\">match</span>(route.<span class=\"hljs-property\">pattern</span>);\n\n    <span class=\"hljs-keyword\">if</span> (matchArr) {\n        <span class=\"hljs-comment\">// Extract params and run some stuff</span>\n    }\n}\n</code>","algorithm/second":"<code class='hljs'><span class=\"hljs-keyword\">const</span> route = routesMap[path];\n<span class=\"hljs-keyword\">if</span> (route) {\n    <span class=\"hljs-comment\">// Run stuff here </span>\n}\n</code>","algorithm/first":"<code class='hljs'><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> route <span class=\"hljs-keyword\">of</span> routes) {\n    <span class=\"hljs-keyword\">if</span> (route.<span class=\"hljs-property\">path</span> === path) {\n        <span class=\"hljs-comment\">// Run stuff here</span>\n    }\n}\n</code>"};for(const e of document.querySelectorAll('pre[data-snippet]'))e.innerHTML=snippets[e.dataset.snippet];